// Fichier: enums.js
export const ConvertUnit = {
    Temperature: "Temperature",
    Frequency: "Frequency",
    Speed: "Speed",
    Time: "Time",
    Mass: "Mass",
    Pressure: "Pressure",
    Energy: "Energy",
    Length: "Length",
    Area: "Area",
    Volume: "Volume",
};

export const Unit = {
    Temperature: {
        Celsius: {
            name: "Celsius",
            symbol: "°C",
        },
        Fahrenheit: {
            name: "Fahrenheit",
            symbol: "°F",
        },
        Kelvin: {
            name: "Kelvin",
            symbol: "K",
        },
    },
    Frequency: {
        Hertz: {
            name: "Hertz",
            symbol: "Hz",
        },
        KiloHertz: {
            name: "Kilohertz",
            symbol: "kHz",
        },
        MegaHertz: {
            name: "Megahertz",
            symbol: "MHz",
        },
        GigaHertz: {
            name: "Gigahertz",
            symbol: "GHz",
        },
    },
    Speed: {
        MileHour: {
            name: "Mile/Hour",
            symbol: "mph",
        },
        MeterSecond: {
            name: "Meter/Second",
            symbol: "m/s",
        },
        KilometerHour: {
            name: "Kilometer/Hour",
            symbol: "km/h",
        },
        Knot: {
            name: "Knot",
            symbol: "kn",
        },
        FootSecond: {
            name: "Foot/Second",
            symbol: "ft/s",
        },
    },
    Time: {
        Second: {
            name: "Second",
            symbol: "s",
        },
        Minute: {
            name: "Minute",
            symbol: "min",
        },
        Hour: {
            name: "Hour",
            symbol: "h",
        },
        Day: {
            name: "Day",
            symbol: "d",
        },
        Week: {
            name: "Week",
            symbol: "wk",
        },
        Month: {
            name: "Month",
            symbol: "mo",
        },
        Year: {
            name: "Year",
            symbol: "yr",
        },
        Century: {
            name: "Century",
            symbol: "cent",
        },
    },
    Mass: {
        Gram: {
            name: "Gram",
            symbol: "g",
        },
        Kilogram: {
            name: "Kilogram",
            symbol: "kg",
        },
        Tonne: {
            name: "Tonne",
            symbol: "t",
        },
        Stone: {
            name: "Stone",
            symbol: "st",
        },
        Pound: {
            name: "Pound",
            symbol: "lb",
        },
        Ounce: {
            name: "Ounce",
            symbol: "oz",
        },
    },
    Pressure: {
        Pascal: {
            name: "Pascal",
            symbol: "Pa",
        },
        Atmosphere: {
            name: "Atmosphere",
            symbol: "atm",
        },
        Bar: {
            name: "Bar",
            symbol: "bar",
        },
    },
    Energy: {
        Joule: {
            name: "Joule",
            symbol: "J",
        },
        KiloCalorie: {
            name: "Kilocalorie",
            symbol: "kcal",
        },
        WattHour: {
            name: "WattHour",
            symbol: "Wh",
        },
        ElectronVolt: {
            name: "ElectronVolt",
            symbol: "eV",
        },
    },
    Length: {
        Meter: {
            name: "Meter",
            symbol: "m",
        },
        Kilometer: {
            name: "Kilometer",
            symbol: "km",
        },
        Mile: {
            name: "Mile",
            symbol: "mi",
        },
        Yard: {
            name: "Yard",
            symbol: "yd",
        },
        Foot: {
            name: "Foot",
            symbol: "ft",
        },
        Inch: {
            name: "Inch",
            symbol: "in",
        },
    },
    Area: { // Nouvelle catégorie
        SquareMeter: { name: "Square Meter", symbol: "m²" },
        SquareKilometer: { name: "Square Kilometer", symbol: "km²" },
        SquareMile: { name: "Square Mile", symbol: "mi²" },
        Hectare: { name: "Hectare", symbol: "ha" },
        Acre: { name: "Acre", symbol: "ac" },
    },
    Volume: { // Nouvelle catégorie
        Liter: { name: "Liter", symbol: "L" },
        Milliliter: { name: "Milliliter", symbol: "mL" },
        CubicMeter: { name: "Cubic Meter", symbol: "m³" },
        CubicCentimeter: { name: "Cubic Centimeter", symbol: "cm³" },
        Gallon: { name: "Gallon (US)", symbol: "gal" },
        Quart: { name: "Quart (US)", symbol: "qt" },
    },
};

export const conversions = {
    Temperature: {
        CelsiusToKelvin: (value) => parseFloat(value) + 273.15,
        CelsiusToFahrenheit: (value) => (parseFloat(value) * 9) / 5 + 32,
        CelsiusToCelsius: (value) => value, // Conversion identique
        CelsiusToRankine: (value) => (parseFloat(value) + 273.15) * 9/5,
        
        KelvinToCelsius: (value) => parseFloat(value) - 273.15,
        KelvinToFahrenheit: (value) => ((parseFloat(value) - 273.15) * 9) / 5 + 32,
        KelvinToKelvin: (value) => value, // Conversion identique
        KelvinToRankine: (value) => parseFloat(value) * 9/5,

        FahrenheitToCelsius: (value) => (parseFloat(value) - 32) * 5 / 9,
        FahrenheitToKelvin: (value) => ((parseFloat(value) - 32) * 5) / 9 + 273.15,
        FahrenheitToFahrenheit: (value) => value, // Conversion identique
        FahrenheitToRankine: (value) => parseFloat(value) + 459.67,
        
        RankineToCelsius: (value) => (parseFloat(value) - 491.67) * 5/9,
        RankineToKelvin: (value) => parseFloat(value) * 5/9,
        RankineToFahrenheit: (value) => parseFloat(value) - 459.67,
        RankineToRankine: (value) => value, // Conversion identique
    },
    Frequency: {
        HertzToKilohertz: (value) => parseFloat(value) / 1000,
        HertzToMegahertz: (value) => parseFloat(value) / 1000000,
        HertzToGigahertz: (value) => parseFloat(value) / 1000000000,

        KilohertzToHertz: (value) => parseFloat(value) * 1000,
        KilohertzToMegahertz: (value) => parseFloat(value) / 1000,
        KilohertzToGigahertz: (value) => parseFloat(value) / 1000000,

        MegahertzToHertz: (value) => parseFloat(value) * 1000000,
        MegahertzToKilohertz: (value) => parseFloat(value) * 1000,
        MegahertzToGigahertz: (value) => parseFloat(value) / 1000,

        GigahertzToHertz: (value) => parseFloat(value) * 1000000000,
        GigahertzToKilohertz: (value) => parseFloat(value) * 1000000,
        GigahertzToMegahertz: (value) => parseFloat(value) * 1000,
    },
    Speed: {
        MeterSecondToKilometerHour: (value) => parseFloat(value) * 3.6,
        MeterSecondToMileHour: (value) => parseFloat(value) * 2.23694,
        MeterSecondToFootSecond: (value) => parseFloat(value) * 3.28084,

        KilometerHourToMeterSecond: (value) => parseFloat(value) / 3.6,
        KilometerHourToMileHour: (value) => parseFloat(value) / 1.60934,
        KilometerHourToFootSecond: (value) => parseFloat(value) / 1.097,

        MileHourToMeterSecond: (value) => parseFloat(value) / 2.23694,
        MileHourToKilometerHour: (value) => parseFloat(value) * 1.60934,
        MileHourToFootSecond: (value) => parseFloat(value) * 1.46667,

        FootSecondToMeterSecond: (value) => parseFloat(value) / 3.28084,
        FootSecondToKilometerHour: (value) => parseFloat(value) * 1.097,
        FootSecondToMileHour: (value) => parseFloat(value) / 1.46667,
    },
    Time: {
        MillisecondToSecond: (value) => parseFloat(value) / 1000,
        MillisecondToMinute: (value) => parseFloat(value) / 60000,
        MillisecondToHour: (value) => parseFloat(value) / 3600000,
        MillisecondToDay: (value) => parseFloat(value) / 86400000,
        MillisecondToWeek: (value) => parseFloat(value) / 604800000,
        MillisecondToMonth: (value) => parseFloat(value) / 2628000000,
        MillisecondToYear: (value) => parseFloat(value) / 31536000000,

        SecondToMillisecond: (value) => parseFloat(value) * 1000,
        SecondToMinute: (value) => parseFloat(value) / 60,
        SecondToHour: (value) => parseFloat(value) / 3600,
        SecondToDay: (value) => parseFloat(value) / 86400,
        SecondToWeek: (value) => parseFloat(value) / 604800,
        SecondToMonth: (value) => parseFloat(value) / 2628000,
        SecondToYear: (value) => parseFloat(value) / 31536000,

        MinuteToMillisecond: (value) => parseFloat(value) * 60000,
        MinuteToSecond: (value) => parseFloat(value) * 60,
        MinuteToHour: (value) => parseFloat(value) / 60,
        MinuteToDay: (value) => parseFloat(value) / 1440,
        MinuteToWeek: (value) => parseFloat(value) / 10080,
        MinuteToMonth: (value) => parseFloat(value) / 43800,
        MinuteToYear: (value) => parseFloat(value) / 525600,

        HourToMillisecond: (value) => parseFloat(value) * 3600000,
        HourToSecond: (value) => parseFloat(value) * 3600,
        HourToMinute: (value) => parseFloat(value) * 60,
        HourToDay: (value) => parseFloat(value) / 24,
        HourToWeek: (value) => parseFloat(value) / 168,
        HourToMonth: (value) => parseFloat(value) / 730,
        HourToYear: (value) => parseFloat(value) / 8760,

        DayToMillisecond: (value) => parseFloat(value) * 86400000,
        DayToSecond: (value) => parseFloat(value) * 86400,
        DayToMinute: (value) => parseFloat(value) * 1440,
        DayToHour: (value) => parseFloat(value) * 24,
        DayToWeek: (value) => parseFloat(value) / 7,
        DayToMonth: (value) => parseFloat(value) / 30.4375,
        DayToYear: (value) => parseFloat(value) / 365.25,

        WeekToMillisecond: (value) => parseFloat(value) * 604800000,
        WeekToSecond: (value) => parseFloat(value) * 604800,
        WeekToMinute: (value) => parseFloat(value) * 10080,
        WeekToHour: (value) => parseFloat(value) * 168,
        WeekToDay: (value) => parseFloat(value) * 7,
        WeekToMonth: (value) => parseFloat(value) / 4.34524,
        WeekToYear: (value) => parseFloat(value) / 52.1775,

        MonthToMillisecond: (value) => parseFloat(value) * 2628000000,
        MonthToSecond: (value) => parseFloat(value) * 2628000,
        MonthToMinute: (value) => parseFloat(value) * 43800,
        MonthToHour: (value) => parseFloat(value) * 730,
        MonthToDay: (value) => parseFloat(value) * 30.4375,
        MonthToWeek: (value) => parseFloat(value) * 4.34524,
        MonthToYear: (value) => parseFloat(value) / 12,

        YearToMillisecond: (value) => parseFloat(value) * 31536000000,
        YearToSecond: (value) => parseFloat(value) * 31536000,
        YearToMinute: (value) => parseFloat(value) * 525600,
        YearToHour: (value) => parseFloat(value) * 8760,
        YearToDay: (value) => parseFloat(value) * 365.25,
        YearToWeek: (value) => parseFloat(value) * 52.1775,
        YearToMonth: (value) => parseFloat(value) * 12,
    },
    Mass: {
        GramToKilogram: (value) => parseFloat(value) / 1000,
        GramToPound: (value) => parseFloat(value) * 0.00220462,
        GramToOunce: (value) => parseFloat(value) * 0.035274,

        KilogramToGram: (value) => parseFloat(value) * 1000,
        KilogramToPound: (value) => parseFloat(value) * 2.20462,
        KilogramToOunce: (value) => parseFloat(value) * 35.274,

        PoundToGram: (value) => parseFloat(value) / 0.00220462,
        PoundToKilogram: (value) => parseFloat(value) / 2.20462,
        PoundToOunce: (value) => parseFloat(value) * 16,

        OunceToGram: (value) => parseFloat(value) / 0.035274,
        OunceToKilogram: (value) => parseFloat(value) / 35.274,
        OunceToPound: (value) => parseFloat(value) / 16,
    },
    Pressure: {
        PascalToBar: (value) => parseFloat(value) / 100000,
        PascalToKilopascal: (value) => parseFloat(value) / 1000,
        PascalToMegapascal: (value) => parseFloat(value) / 1000000,
        PascalToPsi: (value) => parseFloat(value) / 6894.76,
        PascalToAtm: (value) => parseFloat(value) / 101325,
        PascalToTorr: (value) => parseFloat(value) / 133.322,
        PascalToInHg: (value) => parseFloat(value) / 3386.39,

        BarToPascal: (value) => parseFloat(value) * 100000,
        BarToKilopascal: (value) => parseFloat(value) * 100,
        BarToMegapascal: (value) => parseFloat(value) / 1000,
        BarToPsi: (value) => parseFloat(value) * 14.5038,
        BarToAtm: (value) => parseFloat(value) / 1.01325,
        BarToTorr: (value) => parseFloat(value) * 750.062,
        BarToInHg: (value) => parseFloat(value) * 29.5301,

        KilopascalToPascal: (value) => parseFloat(value) * 1000,
        KilopascalToBar: (value) => parseFloat(value) / 100,
        KilopascalToMegapascal: (value) => parseFloat(value) / 1000,
        KilopascalToPsi: (value) => parseFloat(value) / 6.89476,
        KilopascalToAtm: (value) => parseFloat(value) / 101.325,
        KilopascalToTorr: (value) => parseFloat(value) * 7.50062,
        KilopascalToInHg: (value) => parseFloat(value) / 33.8639,

        MegapascalToPascal: (value) => parseFloat(value) * 1000000,
        MegapascalToBar: (value) => parseFloat(value) * 1000,
        MegapascalToKilopascal: (value) => parseFloat(value) * 1000,
        MegapascalToPsi: (value) => parseFloat(value) * 145.038,
        MegapascalToAtm: (value) => parseFloat(value) * 9.86923,
        MegapascalToTorr: (value) => parseFloat(value) * 7500.62,
        MegapascalToInHg: (value) => parseFloat(value) * 295.301,

        PsiToPascal: (value) => parseFloat(value) * 6894.76,
        PsiToBar: (value) => parseFloat(value) / 14.5038,
        PsiToKilopascal: (value) => parseFloat(value) * 6.89476,
        PsiToMegapascal: (value) => parseFloat(value) / 145.038,
        PsiToAtm: (value) => parseFloat(value) / 14.696,
        PsiToTorr: (value) => parseFloat(value) * 51.7149,
        PsiToInHg: (value) => parseFloat(value) / 0.491154,

        AtmToPascal: (value) => parseFloat(value) * 101325,
        AtmToBar: (value) => parseFloat(value) * 1.01325,
        AtmToKilopascal: (value) => parseFloat(value) * 101.325,
        AtmToMegapascal: (value) => parseFloat(value) * 0.101325,
        AtmToPsi: (value) => parseFloat(value) * 14.696,
        AtmToTorr: (value) => parseFloat(value) * 760,
        AtmToInHg: (value) => parseFloat(value) * 29.9213,

        TorrToPascal: (value) => parseFloat(value) * 133.322,
        TorrToBar: (value) => parseFloat(value) / 750.062,
        TorrToKilopascal: (value) => parseFloat(value) / 7.50062,
        TorrToMegapascal: (value) => parseFloat(value) / 7500.62,
        TorrToPsi: (value) => parseFloat(value) / 51.7149,
        TorrToAtm: (value) => parseFloat(value) / 760,
        TorrToInHg: (value) => parseFloat(value) / 25.4,

        InHgToPascal: (value) => parseFloat(value) * 3386.39,
        InHgToBar: (value) => parseFloat(value) / 29.5301,
        InHgToKilopascal: (value) => parseFloat(value) * 33.8639,
        InHgToMegapascal: (value) => parseFloat(value) / 295.301,
        InHgToPsi: (value) => parseFloat(value) * 0.491154,
        InHgToAtm: (value) => parseFloat(value) / 29.9213,
        InHgToTorr: (value) => parseFloat(value) * 25.4,
    },
    Energy: {
        JouleToKilojoule: (value) => parseFloat(value) / 1000,
        JouleToCalorie: (value) => parseFloat(value) * 0.239006,
        JouleToKilocalorie: (value) => parseFloat(value) * 0.000239006,
        JouleToWattHour: (value) => parseFloat(value) / 3600,

        KilojouleToJoule: (value) => parseFloat(value) * 1000,
        KilojouleToCalorie: (value) => parseFloat(value) * 239.006,
        KilojouleToKilocalorie: (value) => parseFloat(value) * 0.239006,
        KilojouleToWattHour: (value) => parseFloat(value) / 3.6,

        CalorieToJoule: (value) => parseFloat(value) / 0.239006,
        CalorieToKilojoule: (value) => parseFloat(value) / 239.006,
        CalorieToKilocalorie: (value) => parseFloat(value) * 0.001,
        CalorieToWattHour: (value) => parseFloat(value) / 860,

        KilocalorieToJoule: (value) => parseFloat(value) / 0.000239006,
        KilocalorieToKilojoule: (value) => parseFloat(value) / 0.239006,
        KilocalorieToCalorie: (value) => parseFloat(value) * 1000,
        KilocalorieToWattHour: (value) => parseFloat(value) * 1.16222,

        WattHourToJoule: (value) => parseFloat(value) * 3600,
        WattHourToKilojoule: (value) => parseFloat(value) * 3.6,
        WattHourToCalorie: (value) => parseFloat(value) * 860,
        WattHourToKilocalorie: (value) => parseFloat(value) * 0.860,
    },
    Length: {
        MeterToKilometer: (value) => parseFloat(value) / 1000,
        MeterToMile: (value) => parseFloat(value) * 0.000621371,
        MeterToYard: (value) => parseFloat(value) * 1.09361,
        MeterToFoot: (value) => parseFloat(value) * 3.28084,
        MeterToInch: (value) => parseFloat(value) * 39.3701,
        
        KilometerToMeter: (value) => parseFloat(value) * 1000,
        KilometerToMile: (value) => parseFloat(value) * 0.621371,
        KilometerToYard: (value) => parseFloat(value) * 1093.61,
        KilometerToFoot: (value) => parseFloat(value) * 3280.84,
        KilometerToInch: (value) => parseFloat(value) * 39370.1,

        MileToMeter: (value) => parseFloat(value) / 0.000621371,
        MileToKilometer: (value) => parseFloat(value) / 0.621371,
        MileToYard: (value) => parseFloat(value) * 1760,
        MileToFoot: (value) => parseFloat(value) * 5280,
        MileToInch: (value) => parseFloat(value) * 63360,

        YardToMeter: (value) => parseFloat(value) / 1.09361,
        YardToKilometer: (value) => parseFloat(value) / 1093.61,
        YardToMile: (value) => parseFloat(value) / 1760,
        YardToFoot: (value) => parseFloat(value) * 3,
        YardToInch: (value) => parseFloat(value) * 36,

        FootToMeter: (value) => parseFloat(value) / 3.28084,
        FootToKilometer: (value) => parseFloat(value) / 3280.84,
        FootToMile: (value) => parseFloat(value) / 5280,
        FootToYard: (value) => parseFloat(value) / 3,
        FootToInch: (value) => parseFloat(value) * 12,

        InchToMeter: (value) => parseFloat(value) / 39.3701,
        InchToKilometer: (value) => parseFloat(value) / 39370.1,
        InchToMile: (value) => parseFloat(value) / 63360,
        InchToYard: (value) => parseFloat(value) / 36,
        InchToFoot: (value) => parseFloat(value) / 12,
    },
    Area: {
        SquareMeterToSquareKilometer: (value) => parseFloat(value) / 1000000,
        SquareMeterToHectare: (value) => parseFloat(value) / 10000,
        SquareMeterToAcre: (value) => parseFloat(value) / 4046.86,
        SquareMeterToSquareFoot: (value) => parseFloat(value) * 10.7639,
        SquareMeterToSquareInch: (value) => parseFloat(value) * 1550.0031,
        SquareMeterToSquareYard: (value) => parseFloat(value) / 0.836127,

        SquareKilometerToSquareMeter: (value) => parseFloat(value) * 1000000,
        SquareKilometerToHectare: (value) => parseFloat(value) * 100,
        SquareKilometerToAcre: (value) => parseFloat(value) * 247.105,
        SquareKilometerToSquareFoot: (value) => parseFloat(value) * 10763910.417,
        SquareKilometerToSquareInch: (value) => parseFloat(value) * 1550003100.31,
        SquareKilometerToSquareYard: (value) => parseFloat(value) * 1195990.0463,

        HectareToSquareMeter: (value) => parseFloat(value) * 10000,
        HectareToSquareKilometer: (value) => parseFloat(value) / 100,
        HectareToAcre: (value) => parseFloat(value) * 2.47105,
        HectareToSquareFoot: (value) => parseFloat(value) * 107639.1042,
        HectareToSquareInch: (value) => parseFloat(value) * 15500031.0031,
        HectareToSquareYard: (value) => parseFloat(value) * 1195.9900463,

        AcreToSquareMeter: (value) => parseFloat(value) * 4046.86,
        AcreToSquareKilometer: (value) => parseFloat(value) / 247.105,
        AcreToHectare: (value) => parseFloat(value) / 2.47105,
        AcreToSquareFoot: (value) => parseFloat(value) * 43560,
        AcreToSquareInch: (value) => parseFloat(value) * 6272640,
        AcreToSquareYard: (value) => parseFloat(value) * 4840,

        SquareFootToSquareMeter: (value) => parseFloat(value) / 10.7639,
        SquareFootToSquareKilometer: (value) => parseFloat(value) / 10763910.417,
        SquareFootToHectare: (value) => parseFloat(value) / 107639.1042,
        SquareFootToAcre: (value) => parseFloat(value) / 43560,
        SquareFootToSquareInch: (value) => parseFloat(value) * 144,
        SquareFootToSquareYard: (value) => parseFloat(value) / 9,

        SquareInchToSquareMeter: (value) => parseFloat(value) / 1550.0031,
        SquareInchToSquareKilometer: (value) => parseFloat(value) / 1550003100.31,
        SquareInchToHectare: (value) => parseFloat(value) / 15500031.0031,
        SquareInchToAcre: (value) => parseFloat(value) / 6272640,
        SquareInchToSquareFoot: (value) => parseFloat(value) / 144,
        SquareInchToSquareYard: (value) => parseFloat(value) / 1296,

        SquareYardToSquareMeter: (value) => parseFloat(value) * 0.836127,
        SquareYardToSquareKilometer: (value) => parseFloat(value) / 1195990.0463,
        SquareYardToHectare: (value) => parseFloat(value) / 1195.9900463,
        SquareYardToAcre: (value) => parseFloat(value) / 4840,
        SquareYardToSquareFoot: (value) => parseFloat(value) * 9,
        SquareYardToSquareInch: (value) => parseFloat(value) * 1296,
    },    
    Volume: {
        CubicMeterToCubicKilometer: (value) => parseFloat(value) / 1e9,
        CubicMeterToLiter: (value) => parseFloat(value) * 1000,
        CubicMeterToMilliliter: (value) => parseFloat(value) * 1e6,
        CubicMeterToCubicCentimeter: (value) => parseFloat(value) * 1e6,
        CubicMeterToCubicFoot: (value) => parseFloat(value) * 35.3147,
        CubicMeterToCubicInch: (value) => parseFloat(value) * 61023.7441,
        CubicMeterToGallon: (value) => parseFloat(value) * 264.172,
        CubicMeterToQuart: (value) => parseFloat(value) * 1056.688,
        CubicMeterToPint: (value) => parseFloat(value) * 2113.376,
        CubicMeterToCup: (value) => parseFloat(value) * 4226.752,
        CubicMeterToTablespoon: (value) => parseFloat(value) * 67267.212,
        CubicMeterToTeaspoon: (value) => parseFloat(value) * 202801.636,

        CubicKilometerToCubicMeter: (value) => parseFloat(value) * 1e9,
        CubicKilometerToLiter: (value) => parseFloat(value) * 1e12,
        CubicKilometerToMilliliter: (value) => parseFloat(value) * 1e15,
        CubicKilometerToCubicCentimeter: (value) => parseFloat(value) * 1e15,
        CubicKilometerToCubicFoot: (value) => parseFloat(value) * 3.53147e10,
        CubicKilometerToCubicInch: (value) => parseFloat(value) * 6.10237441e11,
        CubicKilometerToGallon: (value) => parseFloat(value) * 2.64172e9,
        CubicKilometerToQuart: (value) => parseFloat(value) * 1.056688e10,
        CubicKilometerToPint: (value) => parseFloat(value) * 2.113376e10,
        CubicKilometerToCup: (value) => parseFloat(value) * 4.226752e10,
        CubicKilometerToTablespoon: (value) => parseFloat(value) * 6.7267212e11,
        CubicKilometerToTeaspoon: (value) => parseFloat(value) * 2.02801636e12,

        LiterToCubicMeter: (value) => parseFloat(value) / 1000,
        LiterToCubicKilometer: (value) => parseFloat(value) / 1e12,
        LiterToMilliliter: (value) => parseFloat(value) * 1000,
        LiterToCubicCentimeter: (value) => parseFloat(value) * 1000,
        LiterToCubicFoot: (value) => parseFloat(value) * 0.0353147,
        LiterToCubicInch: (value) => parseFloat(value) * 61.0237441,
        LiterToGallon: (value) => parseFloat(value) * 0.264172,
        LiterToQuart: (value) => parseFloat(value) * 1.056688,
        LiterToPint: (value) => parseFloat(value) * 2.113376,
        LiterToCup: (value) => parseFloat(value) * 4.226752,
        LiterToTablespoon: (value) => parseFloat(value) * 67.267212,
        LiterToTeaspoon: (value) => parseFloat(value) * 202.801636,

        MilliliterToCubicMeter: (value) => parseFloat(value) / 1e6,
        MilliliterToCubicKilometer: (value) => parseFloat(value) / 1e15,
        MilliliterToLiter: (value) => parseFloat(value) / 1000,
        MilliliterToCubicCentimeter: (value) => parseFloat(value),
        MilliliterToCubicFoot: (value) => parseFloat(value) / 28316.8466,
        MilliliterToCubicInch: (value) => parseFloat(value) / 16.387064,
        MilliliterToGallon: (value) => parseFloat(value) / 3785.411784,
        MilliliterToQuart: (value) => parseFloat(value) / 946.352946,
        MilliliterToPint: (value) => parseFloat(value) / 473.176473,
        MilliliterToCup: (value) => parseFloat(value) / 240,
        MilliliterToTablespoon: (value) => parseFloat(value) / 14.7868,
        MilliliterToTeaspoon: (value) => parseFloat(value) / 4.92892,

        CubicCentimeterToCubicMeter: (value) => parseFloat(value) / 1e6,
        CubicCentimeterToCubicKilometer: (value) => parseFloat(value) / 1e15,
        CubicCentimeterToLiter: (value) => parseFloat(value) / 1000,
        CubicCentimeterToMilliliter: (value) => parseFloat(value),
        CubicCentimeterToCubicFoot: (value) => parseFloat(value) / 28316.8466,
        CubicCentimeterToCubicInch: (value) => parseFloat(value) / 16.387064,
        CubicCentimeterToGallon: (value) => parseFloat(value) / 3785.411784,
        CubicCentimeterToQuart: (value) => parseFloat(value) / 946.352946,
        CubicCentimeterToPint: (value) => parseFloat(value) / 473.176473,
        CubicCentimeterToCup: (value) => parseFloat(value) / 240,
        CubicCentimeterToTablespoon: (value) => parseFloat(value) / 14.7868,
        CubicCentimeterToTeaspoon: (value) => parseFloat(value) / 4.92892,

        CubicFootToCubicMeter: (value) => parseFloat(value) / 35.3147,
        CubicFootToCubicKilometer: (value) => parseFloat(value) / 3.53147e10,
        CubicFootToLiter: (value) => parseFloat(value) * 28.3168,
        CubicFootToMilliliter: (value) => parseFloat(value) * 28316.8466,
        CubicFootToCubicCentimeter: (value) => parseFloat(value) * 28316.8466,
        CubicFootToCubicInch: (value) => parseFloat(value) * 1728,
        CubicFootToGallon: (value) => parseFloat(value) * 7.48052,
        CubicFootToQuart: (value) => parseFloat(value) * 29.9221,
        CubicFootToPint: (value) => parseFloat(value) * 59.8442,
        CubicFootToCup: (value) => parseFloat(value) * 119.6884,
        CubicFootToTablespoon: (value) => parseFloat(value) * 1915.0144,
        CubicFootToTeaspoon: (value) => parseFloat(value) * 5745.0432,

        CubicInchToCubicMeter: (value) => parseFloat(value) / 61023.7441,
        CubicInchToCubicKilometer: (value) => parseFloat(value) / 6.10237441e11,
        CubicInchToLiter: (value) => parseFloat(value) / 61.0237441,
        CubicInchToMilliliter: (value) => parseFloat(value) * 16.387064,
        CubicInchToCubicCentimeter: (value) => parseFloat(value) * 16.387064,
        CubicInchToCubicFoot: (value) => parseFloat(value) / 1728,
        CubicInchToGallon: (value) => parseFloat(value) / 231,
        CubicInchToQuart: (value) => parseFloat(value) / 57.75,
        CubicInchToPint: (value) => parseFloat(value) / 28.875,
        CubicInchToCup: (value) => parseFloat(value) / 14.4375,
        CubicInchToTablespoon: (value) => parseFloat(value) * 1.0,
        CubicInchToTeaspoon: (value) => parseFloat(value) * 3.0,
    }
};
